{"version":3,"file":"static/js/6717.aa8fdb03.chunk.js","mappings":"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","sources":["Components/Login/EmplAuthLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { employeeLogin } from \"../../ApiServices/EmployeeHttpService/employeeLoginHttpService\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n\r\nconst EmplAuthLogin = () => {\r\n  const [type, setType] = useState(\"password\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const navigate = useNavigate();\r\n \r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"token-company\")) {\r\n      navigate(\"/Employee/Login\");\r\n    }\r\n  }, []);\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n\r\n    const response = await employeeLogin(data);\r\n    if (!response.data?.error) {\r\n      navigate(\"/Employee/Dashboard\");\r\n      window.location.reload()\r\n      console.log(response)\r\n    }\r\n  };\r\n\r\n  const typeChange = () => {\r\n    if (type === \"password\") setType(\"text\");\r\n    else {\r\n      setType(\"password\");\r\n    }\r\n  };\r\n\r\n  const getPasswordValue = (value) => {\r\n    console.log(value);\r\n    setPassword(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"container-fluid login-bg\" >\r\n        <div className=\"row flex-nowrap\">\r\n        \r\n          <div className=\"col-4 login-form p-4\">\r\n          <div className=\"form-login mt-4\">\r\n          <img src=\"/images/Myot-logo.png\" className=\"logo\" />\r\n                    <h2 className=\"mb-3 fs-7 fw-bolder myot\">Myot</h2>\r\n                    <p className=\"login-desc\">\r\n                      Please fill your detail to access your account.\r\n                    </p>\r\n\r\n                    </div>\r\n                    <form className=\"form-login\" onSubmit={handleSubmit(onSubmit)}>\r\n                      <div className=\"mb-3\">\r\n                        <label\r\n                          for=\"\"\r\n                          className=\"form-label\"\r\n                        >\r\n                          Email Address\r\n                        </label>\r\n                        <input\r\n                          type=\"email\"\r\n                          className=\"form-control\"\r\n                          id=\"email\"\r\n                          aria-describedby=\"emailHelp\"\r\n                          name=\"email\"\r\n                          placeholder=\"example@gmail.com\"\r\n                          autoComplete=\"off\"\r\n                          {...register(\"email\", {\r\n                            required: \"This field is required\",\r\n                            pattern: {\r\n                              value:\r\n                                /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                              message: \"Invalid email address\",\r\n                            },\r\n                          })}\r\n                        />\r\n                         {errors?.email && (\r\n                            <p className=\"form-error mt-1\">\r\n                              {errors.email.message}\r\n                            </p>\r\n                          )}\r\n                          <ToastContainer/>\r\n                      </div>\r\n                      <div className=\"mb-4\">\r\n                        <label\r\n                          for=\"\"\r\n                          className=\"form-label\"\r\n                        >\r\n                          Password\r\n                        </label>\r\n                        <input\r\n                          type=\"password\"\r\n                          className=\"form-control\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          autoComplete=\"off\"\r\n                          {...register(\"password\", {\r\n                            required: true,\r\n                            onChange: (e) => {\r\n                              getPasswordValue(e.target.value);\r\n                            },\r\n                          })}\r\n                        />\r\n                        {password ? (\r\n                            <i\r\n                              className={`fa eyepassword fa-eye${\r\n                                type === \"password\" ? \"\" : \"-slash\"\r\n                              }`}\r\n                              onClick={() => typeChange()}\r\n                            ></i>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          \r\n                          {errors?.password && (\r\n                            <p className=\"form-error mt-1\">\r\n                              This field is required\r\n                            </p>\r\n                          )}\r\n                          \r\n                      </div>\r\n                      <div className=\"d-flex  justify-content-between mb-4 remember\">\r\n                        <div className=\"form-check\">\r\n                          <input\r\n                            className=\"form-check-input primary\"\r\n                            type=\"checkbox\"\r\n                            defaultValue=\"\"\r\n                            id=\"flexCheckChecked\"\r\n                            defaultChecked=\"\"\r\n                          />\r\n                         <label\r\n                            className=\"form-check-label text-dark remember-me\"\r\n                            htmlFor=\"flexCheckChecked\"\r\n                          >\r\n                            Remember me\r\n                          </label>\r\n                        </div>\r\n                        <Link \r\n                      to={\"/Employee/Forgot-password\"}>\r\n                        <a\r\n                          className=\" fw-medium reset-password\"\r\n                          href=\"authentication-forgot-password.html\"\r\n                        >\r\n                          Reset Password? \r\n                        </a>\r\n                        </Link>\r\n                      </div>\r\n                      <button className=\"btn  py-8 mb-4 rounded-2\" to=\"\" type=\"submit\">\r\n                            Submit\r\n                          </button>\r\n                    </form>\r\n          </div>\r\n          <div className=\"col-8 m-auto \">\r\n          <img src=\"/images/Login.png\" alt=\"\" className=\" text-center d-block img-fluid p-inherit\" />\r\n          </div>\r\n          </div>\r\n        </div>\r\n      \r\n      {/*  Import Js Files */}\r\n      {/*  core files */}\r\n      {/* Mirrored from demos.adminmart.com/premium/bootstrap/modernize-bootstrap/package/html/main/authentication-login.html by HTTrack Website Copier/3.x [XR&CO'2014], Tue, 03 Oct 2023 06:44:20 GMT */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmplAuthLogin;"],"names":["EmplAuthLogin","type","setType","useState","password","setPassword","register","handleSubmit","formState","errors","useForm","navigate","useNavigate","useEffect","localStorage","getItem","_jsx","_Fragment","children","className","_jsxs","src","onSubmit","async","_response$data","console","log","data","response","employeeLogin","error","window","location","reload","for","id","name","placeholder","autoComplete","required","pattern","value","message","email","ToastContainer","onChange","e","target","concat","onClick","defaultValue","defaultChecked","htmlFor","Link","to","href","alt"],"sourceRoot":""}